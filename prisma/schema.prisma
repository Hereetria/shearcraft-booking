generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String                @id @default(uuid())
  name              String
  email             String                @unique
  passwordHash      String?
  role              Role                  @default(CUSTOMER)
  isTrusted         Boolean               @default(false)
  emailVerified     Boolean               @default(false)
  emailVerifiedAt   DateTime?
  image             String?
  verificationToken VerificationToken[]
  passwordResetToken PasswordResetToken[]
  refreshTokens     RefreshToken[]
  bookings          Booking[]
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
}

model VerificationToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
  used      Boolean  @default(false)
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Service {
  id        String           @id @default(uuid())
  name      String
  duration  Int
  price     Float
  bookings  Booking[]
  packages  PackageService[]
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model Package {
  id        String           @id @default(uuid())
  name      String
  price     Float
  duration  Int  
  services  PackageService[]
  bookings  Booking[]
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model PackageService {
  packageId String
  serviceId String
  package   Package @relation(fields: [packageId], references: [id])
  service   Service @relation(fields: [serviceId], references: [id])

  @@id([packageId, serviceId])
}

model Booking {
  id        String        @id @default(uuid())
  user      User          @relation(fields: [userId], references: [id])
  userId    String

  service   Service?      @relation(fields: [serviceId], references: [id])
  serviceId String?

  package   Package?      @relation(fields: [packageId], references: [id])
  packageId String?

  dateTime  DateTime
  duration  Int 
  services  Json? 
  status    BookingStatus @default(PENDING)
  
  parentBookingId String?
  parentBooking   Booking? @relation("BookingSlots", fields: [parentBookingId], references: [id], onDelete: Cascade)
  slotBookings    Booking[] @relation("BookingSlots")
  
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

enum Role {
  CUSTOMER
  ADMIN
}



enum BookingStatus {
  PENDING
  APPROVED
  CANCELLED
  EXPIRED
}