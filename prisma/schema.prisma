generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @default(uuid())
  name               String
  email              String               @unique
  passwordHash       String?
  role               Role                 @default(CUSTOMER)
  isTrusted          Boolean              @default(false)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  emailVerified      Boolean              @default(false)
  emailVerifiedAt    DateTime?
  image              String?
  bookings           Booking[]
  passwordResetToken PasswordResetToken[]
  refreshTokens      RefreshToken[]
  verificationToken  VerificationToken[]
}

model VerificationToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  used      Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Service {
  id        String           @id @default(uuid())
  name      String
  duration  Int
  price     Float
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  bookings  Booking[]
  packages  PackageService[]
}

model Package {
  id        String           @id @default(uuid())
  name      String
  price     Float
  duration  Int
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  bookings  Booking[]
  services  PackageService[]
}

model PackageService {
  packageId String
  serviceId String
  package   Package @relation(fields: [packageId], references: [id])
  service   Service @relation(fields: [serviceId], references: [id])

  @@id([packageId, serviceId])
}

model Booking {
  id              String        @id @default(uuid())
  userId          String
  serviceId       String?
  packageId       String?
  dateTime        DateTime
  status          BookingStatus @default(PENDING)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  duration        Int
  services        Json?
  parentBookingId String?
  package         Package?      @relation(fields: [packageId], references: [id])
  parentBooking   Booking?      @relation("BookingSlots", fields: [parentBookingId], references: [id], onDelete: Cascade)
  slotBookings    Booking[]     @relation("BookingSlots")
  service         Service?      @relation(fields: [serviceId], references: [id])
  user            User          @relation(fields: [userId], references: [id])
}

enum Role {
  CUSTOMER
  ADMIN
}

enum BookingStatus {
  PENDING
  APPROVED
  CANCELLED
  EXPIRED
}
